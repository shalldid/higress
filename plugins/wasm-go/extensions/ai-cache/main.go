// File generated by hgctl. Modify as required.
// See: https://higress.io/zh-cn/docs/user/wasm-go#2-%E7%BC%96%E5%86%99-maingo-%E6%96%87%E4%BB%B6

package main

import (
	"errors"
	"fmt"
	"net/http"
	"strings"

	Antonym "ai-cache/types/antonym"
	ChToEn "ai-cache/types/ch-to-en"
	DashScope "ai-cache/types/dashscope"
	DashVector "ai-cache/types/dashvector"
	ProperNoun "ai-cache/types/proper-noun"
	ContentHandler "ai-cache/utils"
	"github.com/alibaba/higress/plugins/wasm-go/pkg/wrapper"
	"github.com/higress-group/proxy-wasm-go-sdk/proxywasm"
	"github.com/higress-group/proxy-wasm-go-sdk/proxywasm/types"
	"github.com/tidwall/gjson"
)

const (
	CacheKeyContextKey       = "cacheKey"
	CacheContentContextKey   = "cacheContent"
	PartialMessageContextKey = "partialMessage"
	ToolCallsContextKey      = "toolCalls"
	StreamContextKey         = "stream"
	DefaultCacheKeyPrefix    = ""
	QueryEmbeddingKey        = "query-embedding"
)

func main() {
	wrapper.SetCtx(
		"ai-cache",
		wrapper.ParseConfigBy(parseConfig),
		wrapper.ProcessRequestHeadersBy(onHttpRequestHeaders),
		wrapper.ProcessRequestBodyBy(onHttpRequestBody),
		wrapper.ProcessResponseHeadersBy(onHttpResponseHeaders),
		wrapper.ProcessStreamingResponseBodyBy(onHttpResponseBody),
	)
}

// @Name ai-cache
// @Category protocol
// @Phase AUTHN
// @Priority 10
// @Title zh-CN AI Cache
// @Description zh-CN 大模型结果缓存
// @IconUrl
// @Version 0.1.0
//
// @Contact.name johnlanni
// @Contact.url
// @Contact.email
//
// @Example
// redis:
//   serviceName: my-redis.dns
//   timeout: 2000
// cacheKeyFrom:
//   requestBody: "messages.@reverse.0.content"
// cacheValueFrom:
//   responseBody: "choices.0.message.content"
// cacheStreamValueFrom:
//   responseBody: "choices.0.delta.content"
// returnResponseTemplate: |
//   {"id":"from-cache","choices":[{"index":0,"message":{"role":"assistant","content":"%s"},"finish_reason":"stop"}],"model":"gpt-4o","object":"chat.completion","usage":{"prompt_tokens":0,"completion_tokens":0,"total_tokens":0}}
// returnStreamResponseTemplate: |
//   data:{"id":"from-cache","choices":[{"index":0,"delta":{"role":"assistant","content":"%s"},"finish_reason":"stop"}],"model":"gpt-4o","object":"chat.completion","usage":{"prompt_tokens":0,"completion_tokens":0,"total_tokens":0}}
//
//   data:[DONE]
//
// @End

type DashScopeInfo struct {
	DashScopeServiceName string             `require:"true" yaml:"DashScopeServiceName" json:"DashScopeServiceName"`
	DashScopeDomain      string             `require:"true" yaml:"DashScopeDomain" json:"DashScopeDomain"`
	DashScopeKey         string             `require:"true" yaml:"DashScopeKey" json:"DashScopeKey"`
	DashScopeClient      wrapper.HttpClient `yaml:"-" json:"-"`
}

type DashVectorInfo struct {
	DashVectorServiceName string             `require:"true" yaml:"DashVectorServiceName" json:"DashVectorServiceName"`
	DashVectorDomain      string             `require:"true" yaml:"DashVectorDomain" json:"DashVectorDomain"`
	DashVectorKey         string             `require:"true" yaml:"DashVectorKey" json:"DashVectorKey"`
	DashVectorCollection  string             `require:"true" yaml:"DashVectorCollection" json:"DashVectorCollection"`
	DashVectorClient      wrapper.HttpClient `yaml:"-" json:"-"`
}

type CacheFilter struct {
	NearestScoreThreshold    float64
	NearestScoreMinThreshold float64
	IgnorePrefix             string
	MinLengthThreshold       uint8
	ProperNounSet            ProperNoun.Stack
	AntonymSet               Antonym.Stack
	ChToEnSet                ChToEn.Stack
}

type KVExtractor struct {
	// @Title zh-CN 从请求 Body 中基于 [GJSON PATH](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) 语法提取字符串
	RequestBody string `required:"false" yaml:"requestBody" json:"requestBody"`
	// @Title zh-CN 从响应 Body 中基于 [GJSON PATH](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) 语法提取字符串
	ResponseBody string `required:"false" yaml:"responseBody" json:"responseBody"`
}

type PluginConfig struct {
	// @Title zh-CN 向量数据库 地址信息
	// @Description zh-CN 用于存储向量结果的 向量数据库 地址
	DashVectorInfo DashVectorInfo `required:"true" yaml:"dashVectorInfo" json:"dashVectorInfo"`
	// @Title zh-CN 通义千问 地址信息
	// @Description zh-CN 用于文本Embedding，获取文本向量数据地址
	DashScopeInfo DashScopeInfo `required:"true" yaml:"dashScopeInfo" json:"dashScopeInfo"`
	// @Title zh-CN 缓存过滤配置
	// @Description zh-CN 用于过滤从缓存查询返回的模型结果数据
	CacheFilter CacheFilter `required:"true" yaml:"cacheFilter" json:"cacheFilter"`
	// @Title zh-CN 缓存 key 的来源
	// @Description zh-CN 往 redis 里存时，使用的 key 的提取方式
	CacheKeyFrom KVExtractor `required:"true" yaml:"cacheKeyFrom" json:"cacheKeyFrom"`
	// @Title zh-CN 缓存 value 的来源
	// @Description zh-CN 往 redis 里存时，使用的 value 的提取方式
	CacheValueFrom KVExtractor `required:"true" yaml:"cacheValueFrom" json:"cacheValueFrom"`
	// @Title zh-CN 流式响应下，缓存 value 的来源
	// @Description zh-CN 往 redis 里存时，使用的 value 的提取方式
	CacheStreamValueFrom KVExtractor `required:"true" yaml:"cacheStreamValueFrom" json:"cacheStreamValueFrom"`
	// @Title zh-CN 返回 HTTP 响应的模版
	// @Description zh-CN 用 %s 标记需要被 cache value 替换的部分
	ReturnResponseTemplate string `required:"true" yaml:"returnResponseTemplate" json:"returnResponseTemplate"`
	// @Title zh-CN 返回流式 HTTP 响应的模版
	// @Description zh-CN 用 %s 标记需要被 cache value 替换的部分
	ReturnStreamResponseTemplate string `required:"true" yaml:"returnStreamResponseTemplate" json:"returnStreamResponseTemplate"`
	// @Title zh-CN 缓存的过期时间
	// @Description zh-CN 单位是秒，默认值为0，即永不过期
	CacheTTL int `required:"false" yaml:"cacheTTL" json:"cacheTTL"`
	// @Title zh-CN Redis缓存Key的前缀
	// @Description zh-CN 默认值是"higress-ai-cache:"
	CacheKeyPrefix string              `required:"false" yaml:"cacheKeyPrefix" json:"cacheKeyPrefix"`
	RedisClient    wrapper.RedisClient `yaml:"-" json:"-"`
}

func parseConfig(json gjson.Result, c *PluginConfig, log wrapper.Log) error {

	log.Infof("config:%s", json.Raw)

	// init DashVector http client
	log.Infof("Start to init DashVector's http client.")
	c.DashVectorInfo.DashVectorKey = json.Get("DashVector.DashVectorKey").String()
	log.Infof("DashVectorKey:%s", c.DashVectorInfo.DashVectorKey)
	if c.DashVectorInfo.DashVectorKey == "" {
		return errors.New("DashVector.DashVectorKey must not be empty")
	}
	c.DashVectorInfo.DashVectorServiceName = json.Get("DashVector.DashVectorServiceName").String()
	log.Infof("DashVectorServiceName:%s", c.DashVectorInfo.DashVectorServiceName)
	if c.DashVectorInfo.DashVectorServiceName == "" {
		return errors.New("DashVector.DashVectorServiceName must not be empty")
	}
	c.DashVectorInfo.DashVectorDomain = json.Get("DashVector.DashVectorDomain").String()
	log.Infof("DashVectorDomain:%s", c.DashVectorInfo.DashVectorDomain)
	if c.DashVectorInfo.DashVectorDomain == "" {
		return errors.New("DashVector.DashVectorDomain must not be empty")
	}
	c.DashVectorInfo.DashVectorCollection = json.Get("DashVector.DashVectorCollection").String()
	log.Infof("DashVectorCollection:%s", c.DashVectorInfo.DashVectorCollection)
	if c.DashVectorInfo.DashVectorCollection == "" {
		return errors.New("DashVector.DashVectorCollection must not be empty")
	}
	c.DashVectorInfo.DashVectorClient = wrapper.NewClusterClient(wrapper.DnsCluster{
		ServiceName: c.DashVectorInfo.DashVectorServiceName,
		Port:        443,
		Domain:      c.DashVectorInfo.DashVectorDomain,
	})

	// init DashScope http client
	log.Infof("Start to init DashScope's http client.")
	c.DashScopeInfo.DashScopeServiceName = json.Get("DashScope.DashScopeServiceName").String()
	log.Infof("DashScopeServiceName:%s", c.DashScopeInfo.DashScopeServiceName)
	if c.DashScopeInfo.DashScopeServiceName == "" {
		return errors.New("DashScope.DashScopeServiceName must not by empty")
	}
	c.DashScopeInfo.DashScopeDomain = json.Get("DashScope.DashScopeDomain").String()
	log.Infof("DashScopeDomain:%s", c.DashScopeInfo.DashScopeDomain)
	if c.DashScopeInfo.DashScopeDomain == "" {
		return errors.New("DashScope.DashScopeDomain must not by empty")
	}
	c.DashScopeInfo.DashScopeKey = json.Get("DashScope.DashScopeKey").String()
	log.Infof("DashScopeKey:%s", c.DashScopeInfo.DashScopeKey)
	if c.DashScopeInfo.DashScopeKey == "" {
		return errors.New("DashScope.DashScopeKey must not by empty")
	}
	c.DashScopeInfo.DashScopeClient = wrapper.NewClusterClient(wrapper.FQDNCluster{
		FQDN: c.DashScopeInfo.DashScopeServiceName,
		Port: 35335,
	})

	// init DashScope cache filter
	log.Infof("Start to init Cache filter.")
	c.CacheFilter.NearestScoreThreshold = json.Get("CacheFilter.NearestScoreThreshold").Float() / 100000.0
	log.Infof("CacheFilter.NearestScoreThreshold:%f", c.CacheFilter.NearestScoreThreshold)
	if c.CacheFilter.NearestScoreThreshold <= 0 {
		return errors.New("CacheFilter.NearestScoreThreshold must not less than or equal to zero")
	}

	c.CacheFilter.NearestScoreMinThreshold = json.Get("CacheFilter.NearestScoreMinThreshold").Float() / 100000.0
	log.Infof("CacheFilter.NearestScoreMinThreshold:%f", c.CacheFilter.NearestScoreMinThreshold)
	if c.CacheFilter.NearestScoreMinThreshold < 0 {
		return errors.New("CacheFilter.NearestScoreMinThreshold must not less than zero")
	}

	c.CacheFilter.IgnorePrefix = json.Get("CacheFilter.IgnorePrefix").String()
	log.Infof("CacheFilter.IgnorePrefix:%s", c.CacheFilter.IgnorePrefix)

	ProperNounArraysStr := json.Get("CacheFilter.ProperNoun").Array()
	c.CacheFilter.ProperNounSet = ProperNoun.Stack{
		Row:    0,
		Groups: make([]ProperNoun.Group, len(ProperNounArraysStr)),
	}

	for _, ArrayStr := range ProperNounArraysStr {
		ProperNounList := strings.Split(ArrayStr.String(), ",")
		ProperNounSetEle := ProperNoun.Group{
			Ele: make([]string, len(ProperNounList)),
		}
		for i, ProperNounVar := range ProperNounList {
			ProperNounSetEle.Ele[i] = ProperNounVar
		}
		c.CacheFilter.ProperNounSet.Groups[c.CacheFilter.ProperNounSet.Row] = ProperNounSetEle
		c.CacheFilter.ProperNounSet.Row++
	}
	log.Infof("CacheFilter.ProperNoun:%s", c.CacheFilter.ProperNounSet.Print())

	AntonymArraysStr := json.Get("CacheFilter.Antonym").Array()
	c.CacheFilter.AntonymSet = Antonym.Stack{
		Row:    0,
		Groups: make([]Antonym.Group, len(AntonymArraysStr)),
	}

	for _, ArrayStr := range AntonymArraysStr {
		AntonymList := strings.Split(ArrayStr.String(), ",")
		AntonymSetEle := Antonym.Group{
			Ele: make([]string, len(AntonymList)),
		}
		for i, AntonymVar := range AntonymList {
			AntonymSetEle.Ele[i] = AntonymVar
		}
		c.CacheFilter.AntonymSet.Groups[c.CacheFilter.AntonymSet.Row] = AntonymSetEle
		c.CacheFilter.AntonymSet.Row++
	}
	log.Infof("CacheFilter.Antonym:%s", c.CacheFilter.AntonymSet.Print())

	ChToEnArraysStr := json.Get("CacheFilter.ChToEn").Array()
	c.CacheFilter.ChToEnSet = ChToEn.Stack{
		Row:    0,
		Groups: make([]ChToEn.Group, len(ChToEnArraysStr)),
	}

	for _, ArrayStr := range ChToEnArraysStr {
		ChToEnList := strings.Split(ArrayStr.String(), ":")
		ChToEnSetEle := ChToEn.Group{
			Ch: ChToEnList[0],
			En: ChToEnList[1],
		}
		c.CacheFilter.ChToEnSet.Groups[c.CacheFilter.ChToEnSet.Row] = ChToEnSetEle
		c.CacheFilter.ChToEnSet.Row++
	}
	log.Infof("CacheFilter.ChToEn:%s", c.CacheFilter.ChToEnSet.Print())

	// init other cache
	log.Infof("Start to init other cache.")
	c.CacheKeyFrom.RequestBody = json.Get("cacheKeyFrom.requestBody").String()
	if c.CacheKeyFrom.RequestBody == "" {
		c.CacheKeyFrom.RequestBody = "messages.@reverse.0.content"
	}
	c.CacheValueFrom.ResponseBody = json.Get("cacheValueFrom.responseBody").String()
	if c.CacheValueFrom.ResponseBody == "" {
		c.CacheValueFrom.ResponseBody = "choices.0.message.content"
	}
	c.CacheStreamValueFrom.ResponseBody = json.Get("cacheStreamValueFrom.responseBody").String()
	if c.CacheStreamValueFrom.ResponseBody == "" {
		c.CacheStreamValueFrom.ResponseBody = "choices.0.delta.content"
	}
	c.ReturnResponseTemplate = json.Get("returnResponseTemplate").String()
	if c.ReturnResponseTemplate == "" {
		c.ReturnResponseTemplate = `{"id":"from-cache","choices":[{"index":0,"message":{"role":"assistant","content":"%s"},"finish_reason":"stop"}],"model":"gpt-4o","object":"chat.completion","usage":{"prompt_tokens":0,"completion_tokens":0,"total_tokens":0}}`
	}
	c.ReturnStreamResponseTemplate = json.Get("returnStreamResponseTemplate").String()
	if c.ReturnStreamResponseTemplate == "" {
		c.ReturnStreamResponseTemplate = `data:{"id":"from-cache","choices":[{"index":0,"delta":{"role":"assistant","content":"%s"},"finish_reason":"stop"}],"model":"gpt-4o","object":"chat.completion","usage":{"prompt_tokens":0,"completion_tokens":0,"total_tokens":0}}` + "\n\ndata:[DONE]\n\n"
	}

	c.CacheKeyPrefix = json.Get("cacheKeyPrefix").String()
	if c.CacheKeyPrefix == "" {
		c.CacheKeyPrefix = DefaultCacheKeyPrefix
	}

	log.Info("Init ai cache's components successfully.")
	return nil
}

func onHttpRequestHeaders(ctx wrapper.HttpContext, config PluginConfig, log wrapper.Log) types.Action {
	contentType, _ := proxywasm.GetHttpRequestHeader("content-type")
	// The request does not have a body.
	if contentType == "" {
		return types.ActionContinue
	}
	if !strings.Contains(contentType, "application/json") {
		log.Warnf("content is not json, can't process:%s", contentType)
		ctx.DontReadRequestBody()
		return types.ActionContinue
	}
	_ = proxywasm.RemoveHttpRequestHeader("Accept-Encoding")
	// The request has a body and requires delaying the header transmission until a cache miss occurs,
	// at which point the header should be sent.
	return types.HeaderStopIteration
}

func onHttpRequestBody(ctx wrapper.HttpContext, c PluginConfig, body []byte, log wrapper.Log) types.Action {
	bodyJson := gjson.ParseBytes(body)
	// TODO: It may be necessary to support stream mode determination for different LLM providers.
	stream := false
	if bodyJson.Get("stream").Bool() {
		stream = true
		ctx.SetContext(StreamContextKey, struct{}{})
	} else if ctx.GetContext(StreamContextKey) != nil {
		stream = true
	}

	SessionKeyArray := bodyJson.Get("messages.@reverse").Array()

	var key string
	for i, SessionKey := range SessionKeyArray {
		SessionKeyRole := ContentHandler.TrimQuote(gjson.ParseBytes([]byte(SessionKey.String())).Get("role").Raw)
		if "user" == SessionKeyRole {
			SessionKeyContent := ContentHandler.TrimQuote(gjson.ParseBytes([]byte(SessionKey.String())).Get("content").Raw)
			if i == 0 {
				key = strings.TrimPrefix(SessionKeyContent, c.CacheFilter.IgnorePrefix)
				if strings.HasPrefix(SessionKeyContent, c.CacheFilter.IgnorePrefix) {
					break
				}
			} else {
				if strings.HasPrefix(SessionKeyContent, c.CacheFilter.IgnorePrefix) {
					key = ContentHandler.Generate(strings.TrimPrefix(SessionKeyContent, c.CacheFilter.IgnorePrefix), key, &c.CacheFilter.ProperNounSet)
					break
				}
			}
		}
	}

	if key == "" {
		log.Debug("parse key from request body failed")
		return types.ActionContinue
	}

	key = c.CacheFilter.ChToEnSet.Translate(key)

	log.Infof("Receive key:%s.", key)

	EmbeddingUrl, EmbeddingRequestBody, EmbeddingHeader := DashScope.GenerateTextEmbeddingsRequest(key, log)
	EmbeddingErr := c.DashScopeInfo.DashScopeClient.Post(
		EmbeddingUrl,
		EmbeddingHeader,
		EmbeddingRequestBody,
		func(statusCode int, responseHeaders http.Header, responseBody []byte) {
			if statusCode != 200 {
				log.Errorf("Failed to fetch embeddings, statusCode: %d, responseBody: %s", statusCode, string(responseBody))
				// result = nil
				ctx.SetContext(QueryEmbeddingKey, nil)
				ctx.SetContext(CacheKeyContextKey, nil)
				_ = proxywasm.ResumeHttpRequest()
			} else {
				log.Infof("Successfully fetched embeddings for key:%s.", key)
				DashScopeEmbeddingResponseBody, _ := DashScope.TextEmbeddingsVectorResponse(responseBody, log)
				// 向量值
				EmbeddingVector := DashScopeEmbeddingResponseBody.Output.Embeddings[0].Embedding
				ctx.SetContext(QueryEmbeddingKey, EmbeddingVector)
				// Vector交互
				VectorUrl, VectorRequestBody, VectorHeader, _ := DashVector.GenerateQueryNearestVectorRequest(c.DashVectorInfo.DashVectorCollection, c.DashVectorInfo.DashVectorKey, EmbeddingVector, log)
				QueryNearestErr := c.DashVectorInfo.DashVectorClient.Post(
					VectorUrl,
					VectorHeader,
					VectorRequestBody,
					func(statusCode int, responseHeaders http.Header, responseBody []byte) {
						NearestResponseBody, _ := DashVector.QueryVectorResponse(responseBody, log)
						if len(NearestResponseBody.Output) > 0 {
							NearestResponseBodyScore := NearestResponseBody.Output[0].Score
							NearestResponseBodyFields := NearestResponseBody.Output[0].Fields
							if (NearestResponseBodyScore <= c.CacheFilter.NearestScoreThreshold && NearestResponseBodyScore >= c.CacheFilter.NearestScoreMinThreshold) || NearestResponseBodyScore <= 0 {
								if ContentHandler.IsDiffWithAntonymSet(c.CacheFilter.AntonymSet, NearestResponseBodyFields.OriginQuestion, key) {
									log.Infof("Origin question has antonym with key, origin:%s, key:%s.", NearestResponseBodyFields.OriginQuestion, key)
									ctx.SetContext(CacheKeyContextKey, key)
									_ = proxywasm.ResumeHttpRequest()
								} else {
									log.Infof("Query similar question:%s, score:%f", NearestResponseBodyFields.OriginQuestion, NearestResponseBodyScore)
									if !stream {
										_ = proxywasm.SendHttpResponse(200, [][2]string{{"content-type", "application/json; charset=utf-8"}}, []byte(fmt.Sprintf(c.ReturnResponseTemplate, NearestResponseBodyFields.Content)), -1)
									} else {
										_ = proxywasm.SendHttpResponse(200, [][2]string{{"content-type", "text/event-stream; charset=utf-8"}}, []byte(fmt.Sprintf(c.ReturnStreamResponseTemplate, NearestResponseBodyFields.Content)), -1)
									}
									return
								}
							} else {
								log.Infof("Query similar key, but the score of result is larger than the threshold, score:%f, maxThreshold:%f, minThreshold:%f, content:%s. ", NearestResponseBodyScore, c.CacheFilter.NearestScoreThreshold, c.CacheFilter.NearestScoreMinThreshold, NearestResponseBodyFields.OriginQuestion)
								ctx.SetContext(CacheKeyContextKey, key)
								_ = proxywasm.ResumeHttpRequest()
							}
						} else {
							log.Infof("Can not query nearest key:%s", key)
							ctx.SetContext(CacheKeyContextKey, key)
							_ = proxywasm.ResumeHttpRequest()
						}
					}, 100000)
				if QueryNearestErr != nil {
					log.Errorf("Query nearest vector error: %v", QueryNearestErr)
					_ = proxywasm.ResumeHttpRequest()
					return
				}
			}
		}, 10000)
	if EmbeddingErr != nil {
		log.Errorf("Embedding text error: %v", EmbeddingErr)
		_ = proxywasm.ResumeHttpRequest()
	}
	return types.ActionPause
}

func onHttpResponseHeaders(ctx wrapper.HttpContext, config PluginConfig, log wrapper.Log) types.Action {
	contentType, _ := proxywasm.GetHttpResponseHeader("content-type")
	if strings.Contains(contentType, "text/event-stream") {
		ctx.SetContext(StreamContextKey, struct{}{})
	}
	return types.ActionContinue
}

func onHttpResponseBody(ctx wrapper.HttpContext, config PluginConfig, chunk []byte, isLastChunk bool, log wrapper.Log) []byte {
	if ctx.GetContext(ToolCallsContextKey) != nil {
		// we should not cache tool call result
		return chunk
	}
	keyI := ctx.GetContext(CacheKeyContextKey)
	if keyI == nil {
		return chunk
	}
	if !isLastChunk {
		stream := ctx.GetContext(StreamContextKey)
		if stream == nil {
			tempContentI := ctx.GetContext(CacheContentContextKey)
			if tempContentI == nil {
				ctx.SetContext(CacheContentContextKey, chunk)
				return chunk
			}
			tempContent := tempContentI.([]byte)
			tempContent = append(tempContent, chunk...)
			ctx.SetContext(CacheContentContextKey, tempContent)
		} else {
			var partialMessage []byte
			partialMessageI := ctx.GetContext(PartialMessageContextKey)
			if partialMessageI != nil {
				partialMessage = append(partialMessageI.([]byte), chunk...)
			} else {
				partialMessage = chunk
			}
			messages := strings.Split(string(partialMessage), "\n\n")
			for i, msg := range messages {
				if i < len(messages)-1 {
					// process complete message
					processSSEMessage(ctx, config, msg, log)
				}
			}
			if !strings.HasSuffix(string(partialMessage), "\n\n") {
				ctx.SetContext(PartialMessageContextKey, []byte(messages[len(messages)-1]))
			} else {
				ctx.SetContext(PartialMessageContextKey, nil)
			}
		}
		return chunk
	}
	// last chunk
	key := keyI.(string)
	stream := ctx.GetContext(StreamContextKey)
	var value string
	if stream == nil {
		var body []byte
		tempContentI := ctx.GetContext(CacheContentContextKey)
		if tempContentI != nil {
			body = append(tempContentI.([]byte), chunk...)
		} else {
			body = chunk
		}
		bodyJson := gjson.ParseBytes(body)

		value = ContentHandler.TrimQuote(bodyJson.Get(config.CacheValueFrom.ResponseBody).Raw)
		if value == "" {
			log.Warnf("parse value from response body failded, body:%s", body)
			return chunk
		}
	} else {
		if len(chunk) > 0 {
			var lastMessage []byte
			partialMessageI := ctx.GetContext(PartialMessageContextKey)
			if partialMessageI != nil {
				lastMessage = append(partialMessageI.([]byte), chunk...)
			} else {
				lastMessage = chunk
			}
			if !strings.HasSuffix(string(lastMessage), "\n\n") {
				log.Warnf("invalid lastMessage:%s", lastMessage)
				return chunk
			}
			// remove the last \n\n
			lastMessage = lastMessage[:len(lastMessage)-2]
			value = processSSEMessage(ctx, config, string(lastMessage), log)
		} else {
			tempContentI := ctx.GetContext(CacheContentContextKey)
			if tempContentI == nil {
				return chunk
			}
			value = tempContentI.(string)
		}
	}
	VectorBody := ctx.GetContext(QueryEmbeddingKey).([]float64)
	if VectorBody != nil {
		FieldsBody := DashVector.Fields{
			OriginQuestion: key,
			Content:        value,
		}
		InsertVectorUrl, InsertVectorBody, InsertVectorHeader, _ := DashVector.GenerateInsertDocumentsRequest(config.DashVectorInfo.DashVectorCollection, config.DashVectorInfo.DashVectorKey, FieldsBody, VectorBody, log)
		log.Infof("insert doc key:%s, content:%s.", key, value)
		_ = config.DashVectorInfo.DashVectorClient.Post(
			InsertVectorUrl,
			InsertVectorHeader,
			InsertVectorBody,
			func(statusCode int, responseHeaders http.Header, responseBody []byte) {
				log.Infof("Insert vector statusCode:%d.", statusCode)
			},
			100000)
	}

	return chunk
}

func processSSEMessage(ctx wrapper.HttpContext, config PluginConfig, sseMessage string, log wrapper.Log) string {
	subMessages := strings.Split(sseMessage, "\n")
	var message string
	for _, msg := range subMessages {
		if strings.HasPrefix(msg, "data:") {
			message = msg
			break
		}
	}
	if len(message) < 6 {
		log.Errorf("invalid message:%s", message)
		return ""
	}
	// skip the prefix "data:"
	bodyJson := message[5:]
	if gjson.Get(bodyJson, config.CacheStreamValueFrom.ResponseBody).Exists() {
		tempContentI := ctx.GetContext(CacheContentContextKey)
		if tempContentI == nil {
			content := ContentHandler.TrimQuote(gjson.Get(bodyJson, config.CacheStreamValueFrom.ResponseBody).Raw)
			ctx.SetContext(CacheContentContextKey, content)
			return content
		}
		contentAppend := ContentHandler.TrimQuote(gjson.Get(bodyJson, config.CacheStreamValueFrom.ResponseBody).Raw)
		content := tempContentI.(string) + contentAppend
		ctx.SetContext(CacheContentContextKey, content)
		return content
	} else if gjson.Get(bodyJson, "choices.0.delta.content.tool_calls").Exists() {
		// TODO: compatible with other providers
		ctx.SetContext(ToolCallsContextKey, struct{}{})
		return ""
	}
	log.Debugf("unknown message:%s", bodyJson)
	return ""
}
