// File generated by hgctl. Modify as required.
// See: https://higress.io/zh-cn/docs/user/wasm-go#2-%E7%BC%96%E5%86%99-maingo-%E6%96%87%E4%BB%B6

package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"math/rand"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/alibaba/higress/plugins/wasm-go/pkg/wrapper"
	"github.com/go-ego/gse"
	"github.com/higress-group/proxy-wasm-go-sdk/proxywasm"
	"github.com/higress-group/proxy-wasm-go-sdk/proxywasm/types"
	"github.com/tidwall/gjson"
)

var QueueCache = initQueue()
var seededRand *rand.Rand = rand.New(rand.NewSource(time.Now().UnixNano()))
var lastQuery string

const (
	CacheKeyContextKey       = "cacheKey"
	CacheContentContextKey   = "cacheContent"
	PartialMessageContextKey = "partialMessage"
	ToolCallsContextKey      = "toolCalls"
	StreamContextKey         = "stream"
	//DefaultCacheKeyPrefix    = "higress-ai-cache:"
	DefaultCacheKeyPrefix = ""
	QueryEmbeddingKey     = "query-embedding"
	charset               = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
)

func main() {
	wrapper.SetCtx(
		"ai-cache",
		wrapper.ParseConfigBy(parseConfig),
		wrapper.ProcessRequestHeadersBy(onHttpRequestHeaders),
		wrapper.ProcessRequestBodyBy(onHttpRequestBody),
		wrapper.ProcessResponseHeadersBy(onHttpResponseHeaders),
		wrapper.ProcessStreamingResponseBodyBy(onHttpResponseBody),
	)
}

// @Name ai-cache
// @Category protocol
// @Phase AUTHN
// @Priority 10
// @Title zh-CN AI Cache
// @Description zh-CN 大模型结果缓存
// @IconUrl
// @Version 0.1.0
//
// @Contact.name johnlanni
// @Contact.url
// @Contact.email
//
// @Example
// redis:
//   serviceName: my-redis.dns
//   timeout: 2000
// cacheKeyFrom:
//   requestBody: "messages.@reverse.0.content"
// cacheValueFrom:
//   responseBody: "choices.0.message.content"
// cacheStreamValueFrom:
//   responseBody: "choices.0.delta.content"
// returnResponseTemplate: |
//   {"id":"from-cache","choices":[{"index":0,"message":{"role":"assistant","content":"%s"},"finish_reason":"stop"}],"model":"gpt-4o","object":"chat.completion","usage":{"prompt_tokens":0,"completion_tokens":0,"total_tokens":0}}
// returnStreamResponseTemplate: |
//   data:{"id":"from-cache","choices":[{"index":0,"delta":{"role":"assistant","content":"%s"},"finish_reason":"stop"}],"model":"gpt-4o","object":"chat.completion","usage":{"prompt_tokens":0,"completion_tokens":0,"total_tokens":0}}
//
//   data:[DONE]
//
// @End

type RedisInfo struct {
	// @Title zh-CN redis 服务名称
	// @Description zh-CN 带服务类型的完整 FQDN 名称，例如 my-redis.dns、redis.my-ns.svc.cluster.local
	ServiceName string `required:"true" yaml:"serviceName" json:"serviceName"`
	// @Title zh-CN redis 服务端口
	// @Description zh-CN 默认值为6379
	ServicePort int `required:"false" yaml:"servicePort" json:"servicePort"`
	// @Title zh-CN 用户名
	// @Description zh-CN 登陆 redis 的用户名，非必填
	Username string `required:"false" yaml:"username" json:"username"`
	// @Title zh-CN 密码
	// @Description zh-CN 登陆 redis 的密码，非必填，可以只填密码
	Password string `required:"false" yaml:"password" json:"password"`
	// @Title zh-CN 请求超时
	// @Description zh-CN 请求 redis 的超时时间，单位为毫秒。默认值是1000，即1秒
	Timeout int `required:"false" yaml:"timeout" json:"timeout"`
}

type DashScopeInfo struct {
	DashScopeServiceName string             `require:"true" yaml:"DashScopeServiceName" json:"DashScopeServiceName"`
	DashScopeDomain      string             `require:"true" yaml:"DashScopeDomain" json:"DashScopeDomain"`
	DashScopeKey         string             `require:"true" yaml:"DashScopeKey" json:"DashScopeKey"`
	DashScopeClient      wrapper.HttpClient `yaml:"-" json:"-"`
}

type DashVectorInfo struct {
	DashVectorServiceName           string             `require:"true" yaml:"DashVectorServiceName" json:"DashVectorServiceName"`
	DashVectorDomain                string             `require:"true" yaml:"DashVectorDomain" json:"DashVectorDomain"`
	DashVectorKey                   string             `require:"true" yaml:"DashVectorKey" json:"DashVectorKey"`
	DashVectorCollection            string             `require:"true" yaml:"DashVectorCollection" json:"DashVectorCollection"`
	DashVectorNearestScoreThreshold float64            `require:"true" yaml:"DashVectorNearestScoreThreshold" json:"DashVectorNearestScoreThreshold"`
	DashVectorClient                wrapper.HttpClient `yaml:"-" json:"-"`
}

type KVExtractor struct {
	// @Title zh-CN 从请求 Body 中基于 [GJSON PATH](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) 语法提取字符串
	RequestBody string `required:"false" yaml:"requestBody" json:"requestBody"`
	// @Title zh-CN 从响应 Body 中基于 [GJSON PATH](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) 语法提取字符串
	ResponseBody string `required:"false" yaml:"responseBody" json:"responseBody"`
}

type PluginConfig struct {
	// @Title zh-CN 向量数据库 地址信息
	// @Description zh-CN 用于存储向量结果的 向量数据库 地址
	DashVectorInfo DashVectorInfo `required:"true" yaml:"dashVectorInfo" json:"dashVectorInfo"`
	// @Title zh-CN 通义千问 地址信息
	// @Description zh-CN 用于文本Embedding，获取文本向量数据地址
	DashScopeInfo DashScopeInfo `required:"true" yaml:"dashScopeInfo" json:"dashScopeInfo"`
	// @Title zh-CN Redis 地址信息
	// @Description zh-CN 用于存储缓存结果的 Redis 地址
	RedisInfo RedisInfo `required:"true" yaml:"redis" json:"redis"`
	// @Title zh-CN 缓存 key 的来源
	// @Description zh-CN 往 redis 里存时，使用的 key 的提取方式
	CacheKeyFrom KVExtractor `required:"true" yaml:"cacheKeyFrom" json:"cacheKeyFrom"`
	// @Title zh-CN 缓存 value 的来源
	// @Description zh-CN 往 redis 里存时，使用的 value 的提取方式
	CacheValueFrom KVExtractor `required:"true" yaml:"cacheValueFrom" json:"cacheValueFrom"`
	// @Title zh-CN 流式响应下，缓存 value 的来源
	// @Description zh-CN 往 redis 里存时，使用的 value 的提取方式
	CacheStreamValueFrom KVExtractor `required:"true" yaml:"cacheStreamValueFrom" json:"cacheStreamValueFrom"`
	// @Title zh-CN 返回 HTTP 响应的模版
	// @Description zh-CN 用 %s 标记需要被 cache value 替换的部分
	ReturnResponseTemplate string `required:"true" yaml:"returnResponseTemplate" json:"returnResponseTemplate"`
	// @Title zh-CN 返回流式 HTTP 响应的模版
	// @Description zh-CN 用 %s 标记需要被 cache value 替换的部分
	ReturnStreamResponseTemplate string `required:"true" yaml:"returnStreamResponseTemplate" json:"returnStreamResponseTemplate"`
	// @Title zh-CN 缓存的过期时间
	// @Description zh-CN 单位是秒，默认值为0，即永不过期
	CacheTTL int `required:"false" yaml:"cacheTTL" json:"cacheTTL"`
	// @Title zh-CN Redis缓存Key的前缀
	// @Description zh-CN 默认值是"higress-ai-cache:"
	CacheKeyPrefix string              `required:"false" yaml:"cacheKeyPrefix" json:"cacheKeyPrefix"`
	RedisClient    wrapper.RedisClient `yaml:"-" json:"-"`
	CustomConfig   CustomConfig        `required:"false" yaml:"customConfig" json:"customConfig"`
}

type DashScopeEmbeddingRequest struct {
	Model      string     `json:"model"`
	Input      Input      `json:"input"`
	Parameters Parameters `json:"parameters"`
}

type DashScopeEmbeddingResponse struct {
	RequestId string                           `json:"request_id"`
	Usage     Usage                            `json:"usage"`
	Output    DashScopeEmbeddingResponseOutput `json:"output"`
}

type Input struct {
	Texts []string `json:"texts"`
}

type Parameters struct {
	TextType string `json:"text_type"`
}

type Usage struct {
	TotalTokens int `json:"total_tokens"`
}

type DashScopeEmbeddingResponseOutput struct {
	Embeddings []EmbeddingData `json:"embeddings"`
}

type EmbeddingData struct {
	Embedding []float64 `json:"embedding"`
	TextIndex int       `json:"text_index"`
}

type DashVectorInsertRequest struct {
	Documents []Documents `json:"docs"`
}

type DashVectorSearchRequest struct {
	Vector        []float64 `json:"vector"`
	TopK          int       `json:"topk"`
	IncludeVector bool      `json:"include_vector"`
}

type DashVectorSearchResponse struct {
	Status    int                              `json:"code"`
	RequestId string                           `json:"request_id"`
	Message   string                           `json:"message"`
	Output    []DashVectorSearchResponseOutput `json:"output"`
}

type Documents struct {
	Vector []float64 `json:"vector"`
	Fields Fields    `json:"fields"`
}

type Fields struct {
	OriginQuestion string `json:"originQuestion"`
	Content        string `json:"content"`
}

type DashVectorSearchResponseOutput struct {
	ID     string  `json:"id"`
	Score  float64 `json:"score"`
	Fields Fields  `json:"fields"`
}

type Queue struct {
	Size       int
	MaxSize    int
	QueueArray [3]string
}

type CustomConfig struct {
	PrefixWord string `json:"prefixWord"`
}

func parseConfig(json gjson.Result, c *PluginConfig, log wrapper.Log) error {

	log.Infof("config:%s", json.Raw)

	//init custom config
	log.Infof("Start to init custom config.")
	c.CustomConfig.PrefixWord = json.Get("customConfig.prefixWord").String()
	log.Infof("CustomConfig.PrefixWord:%s", c.CustomConfig.PrefixWord)
	// init DashVector http client
	log.Infof("Start to init DashVector's http client.")
	c.DashVectorInfo.DashVectorKey = json.Get("DashVector.DashVectorKey").String()
	log.Infof("DashVectorKey:%s", c.DashVectorInfo.DashVectorKey)
	if c.DashVectorInfo.DashVectorKey == "" {
		return errors.New("DashVector.DashVectorKey must not be empty")
	}
	c.DashVectorInfo.DashVectorServiceName = json.Get("DashVector.DashVectorServiceName").String()
	log.Infof("DashVectorServiceName:%s", c.DashVectorInfo.DashVectorServiceName)
	if c.DashVectorInfo.DashVectorServiceName == "" {
		return errors.New("DashVector.DashVectorServiceName must not be empty")
	}
	c.DashVectorInfo.DashVectorDomain = json.Get("DashVector.DashVectorDomain").String()
	log.Infof("DashVectorDomain:%s", c.DashVectorInfo.DashVectorDomain)
	if c.DashVectorInfo.DashVectorDomain == "" {
		return errors.New("DashVector.DashVectorDomain must not be empty")
	}
	c.DashVectorInfo.DashVectorCollection = json.Get("DashVector.DashVectorCollection").String()
	log.Infof("DashVectorCollection:%s", c.DashVectorInfo.DashVectorCollection)
	if c.DashVectorInfo.DashVectorCollection == "" {
		return errors.New("DashVector.DashVectorCollection must not be empty")
	}

	c.DashVectorInfo.DashVectorNearestScoreThreshold = json.Get("DashVector.DashVectorNearestScoreThreshold").Float() / 100000.0
	log.Infof("DashVectorNearestScoreThreshold:%f", c.DashVectorInfo.DashVectorNearestScoreThreshold)
	if c.DashVectorInfo.DashVectorNearestScoreThreshold <= 0 {
		return errors.New("DashVector.DashVectorNearestScoreThreshold must not less than or equal to zero")
	}

	c.DashVectorInfo.DashVectorClient = wrapper.NewClusterClient(wrapper.DnsCluster{
		ServiceName: c.DashVectorInfo.DashVectorServiceName,
		Port:        443,
		Domain:      c.DashVectorInfo.DashVectorDomain,
	})

	// init DashScope http client
	log.Infof("Start to init DashScope's http client.")
	c.DashScopeInfo.DashScopeServiceName = json.Get("DashScope.DashScopeServiceName").String()
	log.Infof("DashScopeServiceName:%s", c.DashScopeInfo.DashScopeServiceName)
	if c.DashScopeInfo.DashScopeServiceName == "" {
		return errors.New("DashScope.DashScopeServiceName must not by empty")
	}
	c.DashScopeInfo.DashScopeDomain = json.Get("DashScope.DashScopeDomain").String()
	log.Infof("DashScopeDomain:%s", c.DashScopeInfo.DashScopeDomain)
	if c.DashScopeInfo.DashScopeDomain == "" {
		return errors.New("DashScope.DashScopeDomain must not by empty")
	}
	c.DashScopeInfo.DashScopeKey = json.Get("DashScope.DashScopeKey").String()
	log.Infof("DashScopeKey:%s", c.DashScopeInfo.DashScopeKey)
	if c.DashScopeInfo.DashScopeKey == "" {
		return errors.New("DashScope.DashScopeKey must not by empty")
	}
	c.DashScopeInfo.DashScopeClient = wrapper.NewClusterClient(wrapper.DnsCluster{
		ServiceName: c.DashScopeInfo.DashScopeServiceName,
		Port:        443,
		Domain:      c.DashScopeInfo.DashScopeDomain,
	})

	// init redis client
	log.Infof("Start to init redis client.")
	c.RedisInfo.ServiceName = json.Get("redis.serviceName").String()
	if c.RedisInfo.ServiceName == "" {
		return errors.New("redis service name must not be empty")
	}
	c.RedisInfo.ServicePort = int(json.Get("redis.servicePort").Int())
	if c.RedisInfo.ServicePort == 0 {
		if strings.HasSuffix(c.RedisInfo.ServiceName, ".static") {
			// use default logic port which is 80 for static service
			c.RedisInfo.ServicePort = 80
		} else {
			c.RedisInfo.ServicePort = 6379
		}
	}
	c.RedisInfo.Username = json.Get("redis.username").String()
	c.RedisInfo.Password = json.Get("redis.password").String()
	c.RedisInfo.Timeout = int(json.Get("redis.timeout").Int())
	if c.RedisInfo.Timeout == 0 {
		c.RedisInfo.Timeout = 1000
	}
	c.CacheKeyFrom.RequestBody = json.Get("cacheKeyFrom.requestBody").String()
	if c.CacheKeyFrom.RequestBody == "" {
		c.CacheKeyFrom.RequestBody = "messages.@reverse.0.content"
	}
	c.CacheValueFrom.ResponseBody = json.Get("cacheValueFrom.responseBody").String()
	if c.CacheValueFrom.ResponseBody == "" {
		c.CacheValueFrom.ResponseBody = "choices.0.message.content"
	}
	c.CacheStreamValueFrom.ResponseBody = json.Get("cacheStreamValueFrom.responseBody").String()
	if c.CacheStreamValueFrom.ResponseBody == "" {
		c.CacheStreamValueFrom.ResponseBody = "choices.0.delta.content"
	}
	c.ReturnResponseTemplate = json.Get("returnResponseTemplate").String()
	if c.ReturnResponseTemplate == "" {
		c.ReturnResponseTemplate = `{"id":"from-cache","choices":[{"index":0,"message":{"role":"assistant","content":"%s"},"finish_reason":"stop"}],"model":"gpt-4o","object":"chat.completion","usage":{"prompt_tokens":0,"completion_tokens":0,"total_tokens":0}}`
	}
	c.ReturnStreamResponseTemplate = json.Get("returnStreamResponseTemplate").String()
	if c.ReturnStreamResponseTemplate == "" {
		c.ReturnStreamResponseTemplate = `data:{"id":"from-cache","choices":[{"index":0,"delta":{"role":"assistant","content":"%s"},"finish_reason":"stop"}],"model":"gpt-4o","object":"chat.completion","usage":{"prompt_tokens":0,"completion_tokens":0,"total_tokens":0}}` + "\n\ndata:[DONE]\n\n"
	}
	c.CacheKeyPrefix = json.Get("cacheKeyPrefix").String()
	if c.CacheKeyPrefix == "" {
		c.CacheKeyPrefix = DefaultCacheKeyPrefix
	}
	c.RedisClient = wrapper.NewRedisClusterClient(wrapper.FQDNCluster{
		FQDN: c.RedisInfo.ServiceName,
		Port: int64(c.RedisInfo.ServicePort),
	})
	err := c.RedisClient.Init(c.RedisInfo.Username, c.RedisInfo.Password, int64(c.RedisInfo.Timeout))
	if err != nil {
		log.Errorf("Failed to init redis client: %v", err)
		return err
	}

	log.Info("Init ai cache's components successfully.")
	return nil
}

func onHttpRequestHeaders(ctx wrapper.HttpContext, config PluginConfig, log wrapper.Log) types.Action {

	logInfoForSeqNo(ctx, log, "start onHttpRequestHeaders function.")
	contentType, _ := proxywasm.GetHttpRequestHeader("content-type")
	// The request does not have a body.
	if contentType == "" {
		return types.ActionContinue
	}
	if !strings.Contains(contentType, "application/json") {
		logErrorForSeqNo(ctx, log, "content is not json, can't process:%s", contentType)
		ctx.DontReadRequestBody()
		return types.ActionContinue
	}
	_ = proxywasm.RemoveHttpRequestHeader("Accept-Encoding")
	// The request has a body and requires delaying the header transmission until a cache miss occurs,
	// at which point the header should be sent.
	logInfoForSeqNo(ctx, log, "end onHttpRequestHeaders function.")
	return types.HeaderStopIteration
}

func onHttpRequestBody(ctx wrapper.HttpContext, config PluginConfig, body []byte, log wrapper.Log) types.Action {
	logInfoForSeqNo(ctx, log, "start onHttpRequestBody function.")
	bodyJson := gjson.ParseBytes(body)
	// TODO: It may be necessary to support stream mode determination for different LLM providers.
	stream := false
	if bodyJson.Get("stream").Bool() {
		stream = true
		ctx.SetContext(StreamContextKey, struct{}{})
	} else if ctx.GetContext(StreamContextKey) != nil {
		stream = true
	}
	logInfoForSeqNo(ctx, log, "onHttpRequestBody RequestBody is %s", bodyJson.Get(config.CacheKeyFrom.RequestBody).Raw)
	//删除固定前缀词并补全
	key := handleQuery(bodyJson.Get(config.CacheKeyFrom.RequestBody).Raw, config)
	if key == "" {
		logInfoForSeqNo(ctx, log, "parse key from request body failed")
		return types.ActionContinue
	}
	//保存问题
	lastQuery = key
	logInfoForSeqNo(ctx, log, "onHttpRequestBody lastQuery is %s", lastQuery)
	QueueCache.addQueue(key)
	//CachedKey := config.CacheKeyPrefix + QueueCache.generate()
	CachedKey := config.CacheKeyPrefix + key
	logInfoForSeqNo(ctx, log, "onHttpRequestBody CachedKey is %s", CachedKey)
	EmbeddingUrl, EmbeddingRequestBody, EmbeddingHeader := GenerateTextEmbeddingsRequest(&config, []string{CachedKey}, log)
	logInfoForSeqNo(ctx, log, "onHttpRequestBody EmbeddingUrl is %s", EmbeddingUrl)
	logInfoForSeqNo(ctx, log, "onHttpRequestBody EmbeddingRequestBody is %s", EmbeddingRequestBody)
	logInfoForSeqNo(ctx, log, "onHttpRequestBody EmbeddingHeader is %s", EmbeddingHeader)
	EmbeddingErr := config.DashScopeInfo.DashScopeClient.Post(
		EmbeddingUrl,
		EmbeddingHeader,
		EmbeddingRequestBody,
		func(statusCode int, responseHeaders http.Header, responseBody []byte) {
			logInfoForSeqNo(ctx, log, "Request text embedding statusCode:%d.", statusCode)
			if statusCode != 200 {
				logErrorForSeqNo(ctx, log, "Failed to fetch embeddings, statusCode: %d, responseBody: %s", statusCode, string(responseBody))
				// result = nil
				ctx.SetContext(QueryEmbeddingKey, nil)
				ctx.SetContext(CacheKeyContextKey, nil)
				_ = proxywasm.ResumeHttpRequest()
			} else {
				logInfoForSeqNo(ctx, log, "Successfully fetched embeddings for key:%s", CachedKey)
				DashScopeEmbeddingResponseBody, _ := TextEmbeddingsVectorResponse(ctx, responseBody, log)
				// 向量值
				EmbeddingVector := DashScopeEmbeddingResponseBody.Output.Embeddings[0].Embedding
				logInfoForSeqNo(ctx, log, "EmbeddingVector size:%s", len(EmbeddingVector))
				ctx.SetContext(QueryEmbeddingKey, EmbeddingVector)
				// Vector交互
				VectorUrl, VectorRequestBody, VectorHeader, _ := GenerateQueryNearestVectorRequest(ctx, config, EmbeddingVector, log)
				QueryNearestErr := config.DashVectorInfo.DashVectorClient.Post(
					VectorUrl,
					VectorHeader,
					VectorRequestBody,
					func(statusCode int, responseHeaders http.Header, responseBody []byte) {
						logInfoForSeqNo(ctx, log, "Query nearest vector statusCode:%d, responseBody:%s", statusCode, string(responseBody))
						NearestResponseBody, _ := QueryNearestVectorResponse(ctx, responseBody, log)
						if len(NearestResponseBody.Output) > 0 {
							NearestResponseBodyScore := NearestResponseBody.Output[0].Score
							logInfoForSeqNo(ctx, log, "Query similar score:%f", NearestResponseBodyScore)
							NearestResponseBodyFields := NearestResponseBody.Output[0].Fields
							if NearestResponseBodyScore <= config.DashVectorInfo.DashVectorNearestScoreThreshold {
								logInfoForSeqNo(ctx, log, "Query similar key:%s", NearestResponseBodyFields.OriginQuestion)
								if !stream {
									_ = proxywasm.SendHttpResponse(200, [][2]string{{"content-type", "application/json; charset=utf-8"}}, []byte(fmt.Sprintf(config.ReturnResponseTemplate, NearestResponseBodyFields.Content)), -1)
								} else {
									_ = proxywasm.SendHttpResponse(200, [][2]string{{"content-type", "text/event-stream; charset=utf-8"}}, []byte(fmt.Sprintf(config.ReturnStreamResponseTemplate, NearestResponseBodyFields.Content)), -1)
								}
								return
							} else {
								logInfoForSeqNo(ctx, log, "Query similar key, but the score of result is larger than the threshold, score:%f, threshold:%f. ", NearestResponseBodyScore, config.DashVectorInfo.DashVectorNearestScoreThreshold)
								ctx.SetContext(CacheKeyContextKey, key)
								_ = proxywasm.ResumeHttpRequest()
							}
						} else {
							logInfoForSeqNo(ctx, log, "Can not query nearest key:%s", CachedKey)
							ctx.SetContext(CacheKeyContextKey, key)
							_ = proxywasm.ResumeHttpRequest()
						}
					}, 100000)
				if QueryNearestErr != nil {
					logErrorForSeqNo(ctx, log, "Query nearest vector error: %v", QueryNearestErr)
					_ = proxywasm.ResumeHttpRequest()
					return
				}
			}
		}, 10000)
	if EmbeddingErr != nil {
		log.Errorf("Embedding text error: %v", EmbeddingErr)
		_ = proxywasm.ResumeHttpRequest()
	}
	//if err != nil {
	//	log.Error("redis access failed")
	//	return types.ActionContinue
	//}
	return types.ActionPause
}

func onHttpResponseHeaders(ctx wrapper.HttpContext, config PluginConfig, log wrapper.Log) types.Action {
	logInfoForSeqNo(ctx, log, "start onHttpResponseHeaders function.")
	contentType, _ := proxywasm.GetHttpResponseHeader("content-type")
	if strings.Contains(contentType, "text/event-stream") {
		ctx.SetContext(StreamContextKey, struct{}{})
	}
	logInfoForSeqNo(ctx, log, "end onHttpResponseHeaders function.")
	return types.ActionContinue
}

func onHttpResponseBody(ctx wrapper.HttpContext, config PluginConfig, chunk []byte, isLastChunk bool, log wrapper.Log) []byte {
	logInfoForSeqNo(ctx, log, "start onHttpResponseBody function.")
	if ctx.GetContext(ToolCallsContextKey) != nil {
		// we should not cache tool call result
		return chunk
	}
	keyI := ctx.GetContext(CacheKeyContextKey)
	if keyI == nil {
		return chunk
	}
	if !isLastChunk {
		stream := ctx.GetContext(StreamContextKey)
		if stream == nil {
			tempContentI := ctx.GetContext(CacheContentContextKey)
			if tempContentI == nil {
				ctx.SetContext(CacheContentContextKey, chunk)
				return chunk
			}
			tempContent := tempContentI.([]byte)
			tempContent = append(tempContent, chunk...)
			ctx.SetContext(CacheContentContextKey, tempContent)
		} else {
			var partialMessage []byte
			partialMessageI := ctx.GetContext(PartialMessageContextKey)
			if partialMessageI != nil {
				partialMessage = append(partialMessageI.([]byte), chunk...)
			} else {
				partialMessage = chunk
			}
			messages := strings.Split(string(partialMessage), "\n\n")
			for i, msg := range messages {
				if i < len(messages)-1 {
					// process complete message
					processSSEMessage(ctx, config, msg, log)
				}
			}
			if !strings.HasSuffix(string(partialMessage), "\n\n") {
				ctx.SetContext(PartialMessageContextKey, []byte(messages[len(messages)-1]))
			} else {
				ctx.SetContext(PartialMessageContextKey, nil)
			}
		}
		return chunk
	}
	// last chunk
	key := keyI.(string)
	stream := ctx.GetContext(StreamContextKey)
	var value string
	if stream == nil {
		var body []byte
		tempContentI := ctx.GetContext(CacheContentContextKey)
		if tempContentI != nil {
			body = append(tempContentI.([]byte), chunk...)
		} else {
			body = chunk
		}
		bodyJson := gjson.ParseBytes(body)

		value = TrimQuote(bodyJson.Get(config.CacheValueFrom.ResponseBody).Raw)
		if value == "" {
			logErrorForSeqNo(ctx, log, "parse value from response body failded, body:%s", body)
			return chunk
		}
	} else {
		if len(chunk) > 0 {
			var lastMessage []byte
			partialMessageI := ctx.GetContext(PartialMessageContextKey)
			if partialMessageI != nil {
				lastMessage = append(partialMessageI.([]byte), chunk...)
			} else {
				lastMessage = chunk
			}
			if !strings.HasSuffix(string(lastMessage), "\n\n") {
				logErrorForSeqNo(ctx, log, "invalid lastMessage:%s", lastMessage)
				return chunk
			}
			// remove the last \n\n
			lastMessage = lastMessage[:len(lastMessage)-2]
			value = processSSEMessage(ctx, config, string(lastMessage), log)
		} else {
			tempContentI := ctx.GetContext(CacheContentContextKey)
			if tempContentI == nil {
				return chunk
			}
			value = tempContentI.(string)
		}
	}

	VectorBody := ctx.GetContext(QueryEmbeddingKey).([]float64)
	if VectorBody != nil {
		FieldsBody := Fields{
			OriginQuestion: key,
			Content:        value,
		}
		InsertVectorUrl, InsertVectorBody, InsertVectorHeader, _ := GenerateInsertDocumentsRequest(ctx, config, FieldsBody, VectorBody, log)
		logInfoForSeqNo(ctx, log, " GenerateInsertDocumentsRequest InsertVectorUrl is %s.", InsertVectorUrl)
		logInfoForSeqNo(ctx, log, " GenerateInsertDocumentsRequest InsertVectorBody is %s.", InsertVectorBody)
		logInfoForSeqNo(ctx, log, " GenerateInsertDocumentsRequest InsertVectorHeader is %s.", InsertVectorHeader)
		_ = config.DashVectorInfo.DashVectorClient.Post(
			InsertVectorUrl,
			InsertVectorHeader,
			InsertVectorBody,
			func(statusCode int, responseHeaders http.Header, responseBody []byte) {
				log.Infof("Insert vector statusCode:%d, responseBody:%s", statusCode, string(responseBody))
			},
			100000)
	}
	logInfoForSeqNo(ctx, log, "end onHttpResponseBody function.")
	return chunk
}

func processSSEMessage(ctx wrapper.HttpContext, config PluginConfig, sseMessage string, log wrapper.Log) string {
	subMessages := strings.Split(sseMessage, "\n")
	var message string
	for _, msg := range subMessages {
		if strings.HasPrefix(msg, "data:") {
			message = msg
			break
		}
	}
	if len(message) < 6 {
		logErrorForSeqNo(ctx, log, "invalid message:%s", message)
		return ""
	}
	// skip the prefix "data:"
	bodyJson := message[5:]
	if gjson.Get(bodyJson, config.CacheStreamValueFrom.ResponseBody).Exists() {
		tempContentI := ctx.GetContext(CacheContentContextKey)
		if tempContentI == nil {
			content := TrimQuote(gjson.Get(bodyJson, config.CacheStreamValueFrom.ResponseBody).Raw)
			ctx.SetContext(CacheContentContextKey, content)
			return content
		}
		contentAppend := TrimQuote(gjson.Get(bodyJson, config.CacheStreamValueFrom.ResponseBody).Raw)
		content := tempContentI.(string) + contentAppend
		ctx.SetContext(CacheContentContextKey, content)
		return content
	} else if gjson.Get(bodyJson, "choices.0.delta.content.tool_calls").Exists() {
		// TODO: compatible with other providers
		ctx.SetContext(ToolCallsContextKey, struct{}{})
		return ""
	}
	logInfoForSeqNo(ctx, log, "unknown message:%s", bodyJson)
	return ""
}

func GenerateTextEmbeddingsRequest(c *PluginConfig, texts []string, log wrapper.Log) (string, []byte, [][2]string) {
	url := "/api/v1/services/embeddings/text-embedding/text-embedding"

	//TODO:  需向量化的问题字符串需要判断是否需要添加上下文内容
	//
	data := DashScopeEmbeddingRequest{
		Model: "text-embedding-v2",
		Input: Input{
			Texts: texts,
		},
		Parameters: Parameters{
			TextType: "query",
		},
	}

	requestBody, err := json.Marshal(data)
	if err != nil {
		log.Errorf("Marshal json error:%s, data:%s.", err, data)
		return "", nil, nil
	}

	headers := [][2]string{
		{"Authorization", "Bearer " + c.DashScopeInfo.DashScopeKey},
		{"Content-Type", "application/json"},
	}
	return url, requestBody, headers
}

func GenerateInsertDocumentsRequest(ctx wrapper.HttpContext, c PluginConfig, fields Fields, vector []float64, log wrapper.Log) (string, []byte, [][2]string, error) {
	url := fmt.Sprintf("/v1/collections/%s/docs", c.DashVectorInfo.DashVectorCollection)

	DocumentsObject := Documents{
		Fields: fields,
		Vector: vector,
	}

	requestData := DashVectorInsertRequest{
		Documents: []Documents{DocumentsObject},
	}

	requestBody, err := json.Marshal(requestData)
	if err != nil {
		logErrorForSeqNo(ctx, log, "Marshal json error:%s, data:%s.", err, requestData)
		return "", nil, nil, err
	}

	header := [][2]string{
		{"Content-Type", "application/json"},
		{"dashvector-auth-token", c.DashVectorInfo.DashVectorKey},
	}

	return url, requestBody, header, nil
}

func GenerateQueryNearestVectorRequest(ctx wrapper.HttpContext, c PluginConfig, vector []float64, log wrapper.Log) (string, []byte, [][2]string, error) {
	url := fmt.Sprintf("/v1/collections/%s/query", c.DashVectorInfo.DashVectorCollection)

	requestData := DashVectorSearchRequest{
		Vector:        vector,
		TopK:          1,
		IncludeVector: false,
	}

	requestBody, err := json.Marshal(requestData)
	if err != nil {
		logErrorForSeqNo(ctx, log, "Marshal json error:%s, data:%s.", err, requestData)
		return "", nil, nil, err
	}

	header := [][2]string{
		{"Content-Type", "application/json"},
		{"dashvector-auth-token", c.DashVectorInfo.DashVectorKey},
	}

	return url, requestBody, header, nil
}

func TextEmbeddingsVectorResponse(ctx wrapper.HttpContext, responseBody []byte, log wrapper.Log) (*DashScopeEmbeddingResponse, error) {
	var response DashScopeEmbeddingResponse
	err := json.Unmarshal(responseBody, &response)
	if err != nil {
		logErrorForSeqNo(ctx, log, "[TextEmbeddingsVectorResponse] Unmarshal json error:%s, response:%s.", err, string(responseBody))
		return nil, err
	}
	return &response, nil
}

func QueryNearestVectorResponse(ctx wrapper.HttpContext, responseBody []byte, log wrapper.Log) (*DashVectorSearchResponse, error) {
	var response DashVectorSearchResponse
	err := json.Unmarshal(responseBody, &response)
	if err != nil {
		logErrorForSeqNo(ctx, log, "[QueryNearestVectorResponse]Unmarshal json error:%s, response:%s.", err, string(responseBody))
		return nil, err
	}
	return &response, nil
}

func zhToUnicode(raw []byte) ([]byte, error) {
	str, err := strconv.Unquote(strings.Replace(strconv.Quote(string(raw)), `\\u`, `\u`, -1))
	if err != nil {
		return nil, err
	}
	return []byte(str), nil
}

func TrimQuote(source string) string {
	TempKey := strings.Trim(source, `"`)
	Key, _ := zhToUnicode([]byte(TempKey))
	return string(Key)
}

func handleQuery(source string, config PluginConfig) string {
	TempKey := strings.Trim(source, `"`)
	Key, _ := zhToUnicode([]byte(TempKey))
	//以固定词开头的则为多轮对话中的第一次
	if strings.HasPrefix(string(Key), config.CustomConfig.PrefixWord) {
		return strings.TrimPrefix(string(Key), config.CustomConfig.PrefixWord)
	}
	return completionWordByGse(lastQuery, (string(Key)))
}

func initQueue() (queue *Queue) {
	queue = &Queue{
		MaxSize:    3,
		QueueArray: [3]string{},
	}
	return queue
}

func (q *Queue) addQueue(v string) {

	if q.Size < q.MaxSize {
		q.QueueArray[q.Size] = v
	} else {
		copiedArray := [2]string{}
		copy(copiedArray[:], q.QueueArray[1:])
		copy(q.QueueArray[:], copiedArray[:])
		q.QueueArray[q.MaxSize-1] = v
	}
	q.Size++
}

func (q *Queue) generate() string {
	Result := ""
	for i := 0; i < 3; i++ {
		Ele := q.QueueArray[i]
		if Ele != "" {
			Result += q.QueueArray[i]
		} else {
			break
		}
		Result += " "
	}
	return Result
}

func generateRandomString(length int) string {
	b := make([]byte, length)
	for i := range b {
		b[i] = charset[seededRand.Intn(len(charset))]
	}
	return string(b)
}

func logInfoForSeqNo(ctx wrapper.HttpContext, log wrapper.Log, format string, args ...interface{}) {
	seqNo := ctx.GetContext("seqNo")
	if seqNo == nil || seqNo == "" {
		seqNo = generateRandomString(16)
		ctx.SetContext("seqNo", seqNo)
	}
	log.Infof("seqNo: %s | "+format, seqNo, args)
}
func logErrorForSeqNo(ctx wrapper.HttpContext, log wrapper.Log, format string, args ...interface{}) {
	seqNo := ctx.GetContext("seqNo")
	if seqNo == nil || seqNo == "" {
		seqNo = generateRandomString(16)
		ctx.SetContext("seqNo", seqNo)
	}
	log.Errorf("seqNo: %s | "+format, seqNo, args)
}

var (
	seg gse.Segmenter
)

func completionWordByGse(firstQuestion string, secondQuestion string) string {
	if "" == firstQuestion {
		return secondQuestion
	}
	seg.LoadDict()
	seg.AddToken("控制台", 10000, "nz")
	seg.ReAddToken("控制台", 10000, "nz")

	// 对第一个问题进行分词和词性标注
	// 第一个问题
	firstWords := seg.Segment([]byte(firstQuestion))
	for _, seg := range firstWords {
		fmt.Printf("%s/ %s,", seg.Token().Text(), seg.Token().Pos())
	}
	fmt.Println()
	// 对第二个问题进行分词和词性标注
	// 第二个问题
	secondWords := seg.Segment([]byte(secondQuestion))

	for _, seg := range secondWords {
		fmt.Printf("%s/ %s,", seg.Token().Text(), seg.Token().Pos())
	}
	fmt.Println()
	firstNouns := extractNounsGse(firstWords)
	secondNouns := extractNounsGse(secondWords)

	// 替换问题中的动词
	firstV := extractVerbGse(firstWords)
	secondV := extractVerbGse(secondWords)
	var completedQuestion string
	// 替换第一个问题中的第一个名词为第二个问题中的名词
	if len(firstNouns) > 0 && len(secondNouns) > 0 {
		completedQuestion = strings.Replace(firstQuestion, firstNouns[0], secondNouns[0], 1)
	}

	// 替换第一个问题中的第一个名词为第二个问题中的动词
	if len(firstV) > 0 && len(secondV) > 0 {
		completedQuestion = strings.Replace(firstQuestion, firstV[0], secondV[0], 1)
	}
	return completedQuestion
}

// extractNouns 提取名词
func extractNounsGse(words []gse.Segment) []string {
	nouns := []string{}
	for _, word := range words {
		if word.Token().Pos() == "n" { // 名词
			nouns = append(nouns, word.Token().Text())
		}
	}
	return nouns
}

// extractVerb 提取动词
func extractVerbGse(words []gse.Segment) []string {
	verbs := []string{}
	for _, word := range words {
		if word.Token().Pos() == "v" { // 动词
			verbs = append(verbs, word.Token().Text())
		}
	}
	return verbs
}

// 上下文问题补全
// func completionWord(firstQuestion string, secondQuestion string) string {
// 	if "" == firstQuestion {
// 		return secondQuestion
// 	}
// 	x := gojieba.NewJieba()
// 	x.AddWordEx("控制台", 1000, "n")
// 	defer x.Free()

// 	// 对第一个问题进行分词和词性标注
// 	firstWords := x.Tag(firstQuestion)

// 	// 对第二个问题进行分词和词性标注
// 	secondWords := x.Tag(secondQuestion)

// 	// 替换问题中的名词
// 	firstNouns := extractNouns(firstWords)
// 	secondNouns := extractNouns(secondWords)

// 	var completedQuestion string
// 	// 替换第一个问题中的第一个名词为第二个问题中的名词
// 	if len(firstNouns) > 0 && len(secondNouns) > 0 {
// 		completedQuestion = strings.Replace(firstQuestion, firstNouns[0], secondNouns[0], 1)
// 	}

// 	// 替换问题中的动词
// 	firstV := extractVerb(firstWords)
// 	secondV := extractVerb(secondWords)
// 	// 替换第一个问题中的第一个动词为第二个问题中的动词
// 	if len(firstV) > 0 && len(secondV) > 0 {
// 		completedQuestion = strings.Replace(firstQuestion, firstV[0], secondV[0], 1)
// 	}
// 	return completedQuestion
// }
// extractNouns 提取名词
// func extractNouns(words []string) []string {
// 	nouns := []string{}
// 	for _, word := range words {
// 		parts := strings.Split(word, "/")
// 		if len(parts) == 2 && (parts[1] == "n" || parts[1] == "ns") { // 名词
// 			nouns = append(nouns, parts[0])
// 		}
// 	}
// 	return nouns
// }

// // extractVerb 提取动词
// func extractVerb(words []string) []string {
// 	nouns := []string{}
// 	for _, word := range words {
// 		parts := strings.Split(word, "/")
// 		if len(parts) == 2 && (parts[1] == "v") { // 动词
// 			nouns = append(nouns, parts[0])
// 		}
// 	}
// 	return nouns
// }
